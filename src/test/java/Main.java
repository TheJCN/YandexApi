import top.jgroup.YandexMusicClient;
import top.jgroup.model.TrackInfo;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;

public class Main {
    public static void main(String[] args) throws IOException {
        Properties props = new Properties();
        try (InputStream input = new FileInputStream("config.properties")) {
            props.load(input);
        }

        // --- –¢–æ–∫–µ–Ω—ã ---
        String oauthToken = props.getProperty("YANDEX_MUSIC_TOKEN_OAUTH");
        String extensionToken = props.getProperty("YANDEX_MUSIC_TOKEN_EXTENSION");

        // --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫—Å–∏ ---
        String proxyHost = props.getProperty("PROXY_HOST");
        int proxyPort = Integer.parseInt(props.getProperty("PROXY_PORT"));
        String proxyUser = props.getProperty("PROXY_USERNAME");
        String proxyPassword = props.getProperty("PROXY_PASSWORD");

        System.out.println("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: " + proxyHost + ":" + proxyPort + " —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: " + (proxyUser != null && !proxyUser.isEmpty()));
        Proxy proxyAuth = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));

        // --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
        String proxyHostNoAuth = props.getProperty("PROXY_HOST_NO_AUTH");
        int proxyPortNoAuth = Integer.parseInt(props.getProperty("PROXY_PORT_NO_AUTH"));

        System.out.println("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + proxyHostNoAuth + ":" + proxyPortNoAuth);
        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHostNoAuth, proxyPortNoAuth));

        // --- –ö–∞—Ä—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ ---
        Map<String, String> results = new LinkedHashMap<>();

        // ========== OAUTH –ë–ï–ó –ü–†–û–ö–°–ò ==========
        try {
            YandexMusicClient oauthClient = new YandexMusicClient(oauthToken, true);
            TrackInfo track = getTrack(oauthClient);
            System.out.println("‚úÖ OAuth –±–µ–∑ –ø—Ä–æ–∫—Å–∏: " + track);
            results.put("OAuth –±–µ–∑ –ø—Ä–æ–∫—Å–∏", "‚úÖ –£—Å–ø–µ—Ö");
        } catch (Exception e) {
            System.out.println("‚ùå OAuth –±–µ–∑ –ø—Ä–æ–∫—Å–∏: " + e.getMessage());
            results.put("OAuth –±–µ–∑ –ø—Ä–æ–∫—Å–∏", "‚ùå –ù–µ—É—Å–ø–µ—Ö");
        }

        // ========== OAUTH –° –ü–†–û–ö–°–ò (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏) ==========
        try {
            YandexMusicClient oauthProxyNoAuth = new YandexMusicClient(oauthToken, true, proxy);
            // –ë–µ–∑ setProxyUser/setProxyPassword
            TrackInfo track = getTrack(oauthProxyNoAuth);
            System.out.println("‚úÖ OAuth —Å –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + track);
            results.put("OAuth —Å –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "‚úÖ –£—Å–ø–µ—Ö");
        } catch (Exception e) {
            System.out.println("‚ùå OAuth —Å –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage());
            results.put("OAuth —Å –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "‚ùå –ù–µ—É—Å–ø–µ—Ö");
        }

        // ========== OAUTH –° –ü–†–û–ö–°–ò (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π) ==========
        try {
            YandexMusicClient oauthProxyAuth = new YandexMusicClient(oauthToken, true, proxyAuth);
            oauthProxyAuth.setProxyUser(proxyUser);
            oauthProxyAuth.setProxyPassword(proxyPassword);
            oauthProxyAuth.setProxyAuthRequired(true);
            TrackInfo track = getTrack(oauthProxyAuth);
            System.out.println("‚úÖ OAuth —Å –ø—Ä–æ–∫—Å–∏ c –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: " + track);
            results.put("OAuth —Å –ø—Ä–æ–∫—Å–∏ c –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π", "‚úÖ –£—Å–ø–µ—Ö");
        } catch (Exception e) {
            System.out.println("‚ùå OAuth —Å –ø—Ä–æ–∫—Å–∏ c –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: " + e.getMessage());
            results.put("OAuth —Å –ø—Ä–æ–∫—Å–∏ c –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π", "‚ùå –ù–µ—É—Å–ø–µ—Ö");
        }

        // ========== EXTENSION –ë–ï–ó –ü–†–û–ö–°–ò ==========
        try {
            YandexMusicClient extensionNoProxy = new YandexMusicClient();
            extensionNoProxy.setToken(extensionToken);
            TrackInfo track = getTrack(extensionNoProxy);
            System.out.println("‚úÖ Extension –±–µ–∑ –ø—Ä–æ–∫—Å–∏: " + track);
            results.put("Extension –±–µ–∑ –ø—Ä–æ–∫—Å–∏", "‚úÖ –£—Å–ø–µ—Ö");
        } catch (Exception e) {
            System.out.println("‚ùå Extension –±–µ–∑ –ø—Ä–æ–∫—Å–∏: " + e.getMessage());
            results.put("Extension –±–µ–∑ –ø—Ä–æ–∫—Å–∏", "‚ùå –ù–µ—É—Å–ø–µ—Ö");
        }

        // ========== EXTENSION –° –ü–†–û–ö–°–ò (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏) ==========
        try {
            YandexMusicClient extensionProxyNoAuth = new YandexMusicClient();
            extensionProxyNoAuth.setToken(extensionToken);
            extensionProxyNoAuth.setProxy(proxy);
            // –±–µ–∑ user/password
            TrackInfo track = getTrack(extensionProxyNoAuth);
            System.out.println("‚úÖ Extension —Å –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + track);
            results.put("Extension —Å –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "‚úÖ –£—Å–ø–µ—Ö");
        } catch (Exception e) {
            System.out.println("‚ùå Extension —Å –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage());
            results.put("Extension —Å –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "‚ùå –ù–µ—É—Å–ø–µ—Ö");
        }

        // ========== EXTENSION –° –ü–†–û–ö–°–ò (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π) ==========
        try {
            YandexMusicClient extensionProxyAuth = new YandexMusicClient();
            extensionProxyAuth.setToken(extensionToken);
            extensionProxyAuth.setProxy(proxyAuth);
            extensionProxyAuth.setProxyUser(proxyUser);
            extensionProxyAuth.setProxyPassword(proxyPassword);
            extensionProxyAuth.setProxyAuthRequired(true);
            TrackInfo track = getTrack(extensionProxyAuth);
            System.out.println("‚úÖ Extension —Å –ø—Ä–æ–∫—Å–∏ c –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: " + track);
            results.put("Extension —Å –ø—Ä–æ–∫—Å–∏ c –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π", "‚úÖ –£—Å–ø–µ—Ö");
        } catch (Exception e) {
            System.out.println("‚ùå Extension —Å –ø—Ä–æ–∫—Å–∏ c –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: " + e.getMessage());
            results.put("Extension —Å –ø—Ä–æ–∫—Å–∏ c –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π", "‚ùå –ù–µ—É—Å–ø–µ—Ö");
        }

        // ========== –í–´–í–û–î–ò–ú –¢–ê–ë–õ–ò–¶–£ ==========
        System.out.println("\n===== üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–°–ï–• –ó–ê–ü–†–û–°–û–í =====");
        System.out.printf("%-40s | %-10s%n", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "–°—Ç–∞—Ç—É—Å");
        System.out.println("---------------------------------------------------------------");
        for (Map.Entry<String, String> entry : results.entrySet()) {
            System.out.printf("%-40s | %-10s%n", entry.getKey(), entry.getValue());
        }
    }

    // –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
    private static TrackInfo getTrack(YandexMusicClient client) {
        return client.getCurrentTrackIdAsync()
                .thenCompose(client::getTrackInfoAsync)
                .join();
    }
}
